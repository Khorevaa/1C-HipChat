// 1С:Slack. Send data into HipChat in real-time.

// Copyright © 2015 Петр Базелюк

// Данная лицензия разрешает лицам, получившим копию данного программного 
// обеспечения и сопутствующей документации (в дальнейшем именуемыми «Программное 
// Обеспечение»), безвозмездно использовать Программное Обеспечение без ограничений, 
// включая неограниченное право на использование, копирование, изменение, 
// добавление, публикацию, распространение, сублицензирование и/или продажу копий 
// Программного Обеспечения, также как и лицам, которым предоставляется данное 
// Программное Обеспечение, при соблюдении следующих условий:

// Указанное выше уведомление об авторском праве и данные условия должны быть 
// включены во все копии или значимые части данного Программного Обеспечения.

// ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ», БЕЗ КАКИХ-ЛИБО 
// ГАРАНТИЙ, ЯВНО ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ 
// ГАРАНТИЯМИ ТОВАРНОЙ ПРИГОДНОСТИ, СООТВЕТСТВИЯ ПО ЕГО КОНКРЕТНОМУ НАЗНАЧЕНИЮ И 
// ОТСУТСТВИЯ НАРУШЕНИЙ ПРАВ. НИ В КАКОМ СЛУЧАЕ АВТОРЫ ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ 
// ОТВЕТСТВЕННОСТИ ПО ИСКАМ О ВОЗМЕЩЕНИИ УЩЕРБА, УБЫТКОВ ИЛИ ДРУГИХ ТРЕБОВАНИЙ ПО 
// ДЕЙСТВУЮЩИМ КОНТРАКТАМ, ДЕЛИКТАМ ИЛИ ИНОМУ, ВОЗНИКШИМ ИЗ, ИМЕЮЩИМ ПРИЧИНОЙ ИЛИ 
// СВЯЗАННЫМ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ ИЛИ ИСПОЛЬЗОВАНИЕМ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ 
// ИЛИ ИНЫМИ ДЕЙСТВИЯМИ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ.

// Петр Базелюк
// e-mail: pbazeliuk@gmail.com
// Версия: 0.0.1a

// Требования:
// 	Минимальная версия платформы 1С - 8.3

// Методы:
//	ОтправитьДанные – Отправляет данные в сервис HipChat;


// Процедура отправляет данные в сервисе HipChat
// 	
// Параметры:
// 	Сервер 			- Строка 	- Хост сервера, с которым осуществляется соединение	
//  Токен			- Строка 	- Уникальный токен для интеграции с сервисом. (Integrations -> Incoming WebHooks -> Add Incoming WebHook -> Token)
//  СтруктураДанных - Структура	- Структура в которой описаны поля запроса
//	ОбъектМетаданных 	- <Объект метаданных>	- Объект метаданных, к которому относится событие
//	Данные				- Произвольный			- Данные, с которыми связано событие
//	Комментарий			- Строка				- Произвольная строка комментария к событию
//
Процедура ОтправитьДанныеJSON(Сервер, Токен, Знач СтруктураДанных, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Начало. Отправка сообщения в HipChat'"),
								УровеньЖурналаРегистрации.Информация, 
								ОбъектМетаданных,
								Данные,
								Комментарий);
								
	ВыполнитьПроверкуСтруктурыДанных(СтруктураДанных);
	
	СтруктураJSON = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураДанных Цикл
		Если КлючИЗначение.Ключ <> "path_params" Тогда
			Если КлючИЗначение.Значение.data = Неопределено Тогда
				Продолжить;		
			КонецЕсли;
			СтруктураJSON.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.data);		
		КонецЕсли;
	КонецЦикла;
	
	
	ДанныеJSON = git_JSON.ЗаписатьJSON(СтруктураJSON);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", "Bearer " + Токен);

	path_params = СтруктураДанных.path_params;
	СтрокаСоединения = path_params.start + path_params.data + path_params.end;
	

	HTTPЗапрос = Новый HTTPЗапрос(СтрокаСоединения, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеJSON, "windows-1251");
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
	HTTPСоединение = Новый HTTPСоединение(Сервер, , , , , , ЗащищенноеСоединение);
	
	Попытка 
		HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Ошибка. Отправка сообщения в HipChat'"),
								УровеньЖурналаРегистрации.Ошибка, 
								ОбъектМетаданных,
								Данные,
								ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Успешное завершение. Отправка сообщения в HipChat'"),
								УровеньЖурналаРегистрации.Информация, 
								ОбъектМетаданных,
								Данные,
								Комментарий);
	
КонецПроцедуры // ОтправитьДанные()

Процедура ОтправитьДанныеText(Сервер, Токен, Знач СтруктураДанных, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Начало. Отправка сообщения в HipChat'"),
								УровеньЖурналаРегистрации.Информация, 
								ОбъектМетаданных,
								Данные,
								Комментарий);
								
	ВыполнитьПроверкуСтруктурыДанных(СтруктураДанных);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "text/html");
	Заголовки.Вставить("Authorization", "Bearer " + Токен);

	path_params = СтруктураДанных.path_params;
	СтрокаСоединения = path_params.start + path_params.data + path_params.end;
	

	HTTPЗапрос = Новый HTTPЗапрос(СтрокаСоединения, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтруктураДанных.message.data, "windows-1251");
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
	HTTPСоединение = Новый HTTPСоединение(Сервер, , , , , , ЗащищенноеСоединение);
	
	Попытка 
		HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Ошибка. Отправка сообщения в HipChat'"),
								УровеньЖурналаРегистрации.Ошибка, 
								ОбъектМетаданных,
								Данные,
								ОписаниеОшибки());
		Возврат;
	КонецПопытки;
		
	ЗаписьЖурналаРегистрации(НСтр("ru='Успешное завершение. Отправка сообщения в HipChat'"),
								УровеньЖурналаРегистрации.Информация, 
								ОбъектМетаданных,
								Данные,
								Комментарий);
	
КонецПроцедуры // ОтправитьДанные()


// Проверяет корректность переданой структуры данных 
//
// Параметры:
// 	СтруктураДанных - Структура - Структура в которой описаны поля JSON
//
Процедура ВыполнитьПроверкуСтруктурыДанных(СтруктураДанных)
	
	Перем Значение, ОбязательноДляЗаполнения;
	
	ПроверитьТипЗначенияСтруктуры(СтруктураДанных);
		
	Для каждого КлючИЗначение Из СтруктураДанных Цикл
		
		ПроверитьТипЗначенияСтруктуры(КлючИЗначение.Значение);
		
		Если НЕ КлючИЗначение.Значение.Свойство("data", Значение) Тогда
			ОписаниеОшибки = НСтр("ru='Не найдено поле структуры 'data''");
			ВызватьИсключение ОписаниеОшибки;		
		КонецЕсли;
		
		Если НЕ КлючИЗначение.Значение.Свойство("required", ОбязательноДляЗаполнения) Тогда
			ОписаниеОшибки = НСтр("ru='Не найдено поле структуры 'required''");
			ВызватьИсключение ОписаниеОшибки;		
		КонецЕсли;
		
		ПроверитьТипЗначения("required", ОбязательноДляЗаполнения, Тип("Булево"));
		
		Если ОбязательноДляЗаполнения Тогда
			Если ПустаяСтрока(Значение) Тогда
				ОписаниеОшибки = НСтр("ru='Не заполнено обязательное поле структуры '%Ключ%''");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Ключ%", КлючИЗначение.Ключ);;
				ВызватьИсключение ОписаниеОшибки;		
			КонецЕсли;
		КонецЕсли;
				
	КонецЦикла; 
	
КонецПроцедуры // ВыполнитьПроверкуСтруктурыДанных() 

Процедура ПроверитьТипЗначения(Знач Ключ, Знач Значение, Тип)
	
	Если ТипЗнч(Значение) <> Тип Тогда
		ОписаниеОшибки = НСтр("ru='Структура описания полей JSON содержит ошибочное значение в поле: %Ключ%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Ключ%", Ключ);
		ВызватьИсключение ОписаниеОшибки;			
	КонецЕсли;		
	
КонецПроцедуры // ПроверитьТипЗначения()

Процедура ПроверитьТипЗначенияСтруктуры(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru='Переданные данные не являются структурой описания полей JSON'");	
	КонецЕсли;
	
КонецПроцедуры // ПроверитьТипЗначенияСтруктуры()



Функция ПолучитьПустуюСтруктуруCreateRoom() Экспорт
	
	path_params = Новый Структура;
	path_params.Вставить("start", "/v2/room/");
	path_params.Вставить("data", "");
	path_params.Вставить("end", "");
	path_params.Вставить("required", false);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("path_params", 	path_params);	
	СтруктураДанных.Вставить("topic", 			СоздатьСтруктуруПоля(false, ""));
	СтруктураДанных.Вставить("guest_access", 	СоздатьСтруктуруПоля(false, false));
	СтруктураДанных.Вставить("name", 			СоздатьСтруктуруПоля(true));
	СтруктураДанных.Вставить("owner_user_id", 	СоздатьСтруктуруПоля(false));
	СтруктураДанных.Вставить("privacy", 		СоздатьСтруктуруПоля(false, "public"));
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьПустуюСтруктуруCreateRoom()

Функция ПолучитьПустуюСтруктуруNotification() Экспорт
	
	path_params = Новый Структура;
	path_params.Вставить("start", "/v2/room/");
	path_params.Вставить("data", "");
	path_params.Вставить("end", "/notification");
	path_params.Вставить("required", true);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("path_params", 	path_params);	
	СтруктураДанных.Вставить("color", 			СоздатьСтруктуруПоля(false, "yellow"));
	СтруктураДанных.Вставить("message", 		СоздатьСтруктуруПоля(true));
	СтруктураДанных.Вставить("notify", 			СоздатьСтруктуруПоля(false, false));
	СтруктураДанных.Вставить("message_format", 	СоздатьСтруктуруПоля(false, "html"));
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьПустуюСтруктуруNotification()

Функция ПолучитьПустуюСтруктуруShareLink() Экспорт
	
	path_params = Новый Структура;
	path_params.Вставить("start", "/v2/room/");
	path_params.Вставить("data", "");
	path_params.Вставить("end", "/share/link");
	path_params.Вставить("required", true);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("path_params", 	path_params);	
	СтруктураДанных.Вставить("message", 		СоздатьСтруктуруПоля(false));
	СтруктураДанных.Вставить("link", 			СоздатьСтруктуруПоля(true));
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьПустуюСтруктуруShareLink()


Функция СоздатьСтруктуруПоля(required, default = Неопределено)
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("data", default);
	СтруктураПоля.Вставить("required", required);
	Возврат СтруктураПоля;
	
КонецФункции // СоздатьСтруктуруПоля()






